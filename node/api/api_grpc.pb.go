// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	Auth(ctx context.Context, opts ...grpc.CallOption) (Node_AuthClient, error)
	Xch(ctx context.Context, in *XchQ, opts ...grpc.CallOption) (*XchS, error)
	Ping(ctx context.Context, in *PingQS, opts ...grpc.CallOption) (*PingQS, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Auth(ctx context.Context, opts ...grpc.CallOption) (Node_AuthClient, error) {
	stream, err := c.cc.NewStream(ctx, &Node_ServiceDesc.Streams[0], "/Node/auth", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAuthClient{stream}
	return x, nil
}

type Node_AuthClient interface {
	Send(*AuthSQ) error
	Recv() (*AuthSQ, error)
	grpc.ClientStream
}

type nodeAuthClient struct {
	grpc.ClientStream
}

func (x *nodeAuthClient) Send(m *AuthSQ) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeAuthClient) Recv() (*AuthSQ, error) {
	m := new(AuthSQ)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeClient) Xch(ctx context.Context, in *XchQ, opts ...grpc.CallOption) (*XchS, error) {
	out := new(XchS)
	err := c.cc.Invoke(ctx, "/Node/xch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Ping(ctx context.Context, in *PingQS, opts ...grpc.CallOption) (*PingQS, error) {
	out := new(PingQS)
	err := c.cc.Invoke(ctx, "/Node/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	Auth(Node_AuthServer) error
	Xch(context.Context, *XchQ) (*XchS, error)
	Ping(context.Context, *PingQS) (*PingQS, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) Auth(Node_AuthServer) error {
	return status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedNodeServer) Xch(context.Context, *XchQ) (*XchS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Xch not implemented")
}
func (UnimplementedNodeServer) Ping(context.Context, *PingQS) (*PingQS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_Auth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).Auth(&nodeAuthServer{stream})
}

type Node_AuthServer interface {
	Send(*AuthSQ) error
	Recv() (*AuthSQ, error)
	grpc.ServerStream
}

type nodeAuthServer struct {
	grpc.ServerStream
}

func (x *nodeAuthServer) Send(m *AuthSQ) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeAuthServer) Recv() (*AuthSQ, error) {
	m := new(AuthSQ)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Node_Xch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XchQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Xch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/xch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Xch(ctx, req.(*XchQ))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingQS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Node/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Ping(ctx, req.(*PingQS))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "xch",
			Handler:    _Node_Xch_Handler,
		},
		{
			MethodName: "ping",
			Handler:    _Node_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "auth",
			Handler:       _Node_Auth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// CentralSourceClient is the client API for CentralSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralSourceClient interface {
	Auth(ctx context.Context, opts ...grpc.CallOption) (CentralSource_AuthClient, error)
	Pull(ctx context.Context, in *PullQ, opts ...grpc.CallOption) (*PullS, error)
}

type centralSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralSourceClient(cc grpc.ClientConnInterface) CentralSourceClient {
	return &centralSourceClient{cc}
}

func (c *centralSourceClient) Auth(ctx context.Context, opts ...grpc.CallOption) (CentralSource_AuthClient, error) {
	stream, err := c.cc.NewStream(ctx, &CentralSource_ServiceDesc.Streams[0], "/CentralSource/auth", opts...)
	if err != nil {
		return nil, err
	}
	x := &centralSourceAuthClient{stream}
	return x, nil
}

type CentralSource_AuthClient interface {
	Send(*AuthSQ) error
	Recv() (*AuthSQ, error)
	grpc.ClientStream
}

type centralSourceAuthClient struct {
	grpc.ClientStream
}

func (x *centralSourceAuthClient) Send(m *AuthSQ) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centralSourceAuthClient) Recv() (*AuthSQ, error) {
	m := new(AuthSQ)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centralSourceClient) Pull(ctx context.Context, in *PullQ, opts ...grpc.CallOption) (*PullS, error) {
	out := new(PullS)
	err := c.cc.Invoke(ctx, "/CentralSource/pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralSourceServer is the server API for CentralSource service.
// All implementations must embed UnimplementedCentralSourceServer
// for forward compatibility
type CentralSourceServer interface {
	Auth(CentralSource_AuthServer) error
	Pull(context.Context, *PullQ) (*PullS, error)
	mustEmbedUnimplementedCentralSourceServer()
}

// UnimplementedCentralSourceServer must be embedded to have forward compatible implementations.
type UnimplementedCentralSourceServer struct {
}

func (UnimplementedCentralSourceServer) Auth(CentralSource_AuthServer) error {
	return status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedCentralSourceServer) Pull(context.Context, *PullQ) (*PullS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedCentralSourceServer) mustEmbedUnimplementedCentralSourceServer() {}

// UnsafeCentralSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralSourceServer will
// result in compilation errors.
type UnsafeCentralSourceServer interface {
	mustEmbedUnimplementedCentralSourceServer()
}

func RegisterCentralSourceServer(s grpc.ServiceRegistrar, srv CentralSourceServer) {
	s.RegisterService(&CentralSource_ServiceDesc, srv)
}

func _CentralSource_Auth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CentralSourceServer).Auth(&centralSourceAuthServer{stream})
}

type CentralSource_AuthServer interface {
	Send(*AuthSQ) error
	Recv() (*AuthSQ, error)
	grpc.ServerStream
}

type centralSourceAuthServer struct {
	grpc.ServerStream
}

func (x *centralSourceAuthServer) Send(m *AuthSQ) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centralSourceAuthServer) Recv() (*AuthSQ, error) {
	m := new(AuthSQ)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CentralSource_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullQ)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralSourceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CentralSource/pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralSourceServer).Pull(ctx, req.(*PullQ))
	}
	return interceptor(ctx, in, info, handler)
}

// CentralSource_ServiceDesc is the grpc.ServiceDesc for CentralSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CentralSource",
	HandlerType: (*CentralSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "pull",
			Handler:    _CentralSource_Pull_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "auth",
			Handler:       _CentralSource_Auth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
