syntax = "proto3";

import "google/protobuf/duration.proto";

option go_package = "github.com/nyiyui/qrystal/node/api";

message Ok {
}

service CentralSource {
  rpc push(PushQ) returns (PushS);
  rpc addToken(AddTokenQ) returns (AddTokenS);
  // TODO: rpc canForward(CanForwardQ) returns (CanForwardS);

  rpc ping(PingQS) returns (PingQS);
}

service Kiriyama {
  rpc getStatus(GetStatusQ) returns (stream GetStatusS);
}

message PingQS {}

message PushQ {
  string centralToken = 1;
  string cnn = 2;
  string peerName = 3;
  CentralPeer peer = 4;
  // peer to add. If CentralPeer.allowedIPs is blank, 1 IP address (which is not already used) is assigned automatically.
}

message PushS {
  oneof s {
    Ok ok = 1;
    string invalidData = 2;
    string overflow = 3;
    string other = 4;
  }
}

message CentralConfig {
  map<string, CentralNetwork> networks = 1;
}

message CentralNetwork {
  repeated IPNet ips = 1;
  string me = 2;
  google.protobuf.Duration keepalive = 3;
  int32 listenPort = 4;
  map<string, CentralPeer> peers = 5;
}

message CentralPeer {
  string host = 1;
  repeated IPNet allowedIPs = 2;
  CanSee canSee = 5;
}

message CanSee {
  repeated string only = 1;
}

message IPNet {
  string cidr = 1;
}

message AddTokenQ {
  string centralToken = 1;
  bool overwrite = 2;
  string hash = 3;
  string name = 4;
  map<string, string> networks = 5;
  bool canPull = 6;
  CanPush canPush = 7;
  map<string, LString> canPushNetworksCanSeeElement = 8;
}

message LString {
  repeated string inner = 1;
}

message CanPush {
  map<string, string> networks = 1;
}

message AddTokenS {}

message GetStatusQ {}

message GetStatusS {
  map<int32, CSStatus> cs = 1;
  map<string, string> peer = 2;
}

message CSStatus {
  string name = 1;
  string status = 2;
}
